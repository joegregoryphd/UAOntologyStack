@dc:creator "SIE Disruption Lab"
@dc:contributor "Joe Gregory"
@dc:description "A vocabulary to capture software patterns"
@dc:hasVersion "0.1"
vocabulary <http://siedepartment.com/SIE_Domain/SIE_Software#> as SIE_Software {
	
	////////////////////////////////////////////////////////////////////////////////////
	
	/////// Vocabulary Imports ///////
	
	
	// Import standard vocabularies	
	
    extends <http://purl.org/dc/elements/1.1/> as dc
    extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs
    extends <http://www.w3.org/2001/XMLSchema#> as xsd
    
    // Import relevant vocabularies
    
    extends <http://siedepartment.com/SIE_Foundation/SIE_Foundation#> as foundation
	
	//extends <http://siedepartment.com/SIE_Core/SIE_Information#> as info
	extends <http://siedepartment.com/SIE_Core/SIE_Agent#> as agent
	//extends <http://siedepartment.com/SIE_Core/SIE_Event#> as event
	//extends <http://siedepartment.com/SIE_Core/SIE_Measurement#> as meas
	//extends <http://siedepartment.com/SIE_Core/SIE_Provenance#> as prov
	
	//extends <http://siedepartment.com/SIE_Domain/SIE_SystemArchitecture#> as sa
	//extends <http://siedepartment.com/SIE_Domain/SIE_Mission#> as mission
	//extends <http://siedepartment.com/SIE_Domain/SIE_Requirements#> as req
	//extends <http://siedepartment.com/SIE_Domain/SIE_Test#> as test
	
	
	///////////////////////////////////////////////////////////////////////////////////
	
	/////// Vocabulary Definitions ///////
	
	///// Aspects
	
			
	
	///// Concepts
	
	@rdfs:label "Software"
	@dc:description "A [=Software=] is a..."
	concept Software :> foundation:GenericallyDependentContinuant [
		restricts all relation foundation:genericallyDependentOn to foundation:Object
	]
	
	@rdfs:label "Software Agent"
	@dc:description "A [=SoftwareAgent=] is a..."
	concept SoftwareAgent :> Software, agent:Agent
	
	@rdfs:label "Operating System"
	@dc:description "A [=OperatingSystem=] is a..."
	concept OperatingSystem :> Software
	
	
	
	///// Relations
	
	@rdfs:label "Has Software Vendor"
	@dc:description "[=HasSoftwareVendor=] is a..."
	relation entity HasSoftwareVendor [
		from Software
		to agent:Organization
		@rdfs:label "has software vendor"
		forward hasSoftwareVendor
		@rdfs:label "is software vendor of"
		reverse isSoftwareVendorOf
		asymmetric
		irreflexive
	]
	
	@rdfs:label "Has Entity Source"
	@dc:description "[=HasEntitySource=] is a..."
	relation entity HasEntitySource [
		from foundation:IdentifiedEntity
		to Software
		@rdfs:label "has entity source"
		forward hasEntitySource
		@rdfs:label "is source of entity"
		reverse isSourceOfEntity
		asymmetric
		irreflexive
	]
	
	
	
	
	///// Scalar Properties
	
	@rdfs:label "has software version"
	@dc:description "[=hasSoftwareVersion=] ..."
	scalar property hasSoftwareVersion [
		domain Software
		range xsd:string
	]
	
	
	
	///// Rules
		
	
}